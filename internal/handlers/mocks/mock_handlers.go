// Code generated by MockGen. DO NOT EDIT.
// Source: builder.go
//
// Generated by this command:
//
//	mockgen -source=builder.go -package=mocks -destination=./mocks/mock_handlers.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	models "BannerFlow/internal/domain/models"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateBanner mocks base method.
func (m *MockService) CreateBanner(ctx context.Context, banner *models.Banner) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBanner", ctx, banner)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBanner indicates an expected call of CreateBanner.
func (mr *MockServiceMockRecorder) CreateBanner(ctx, banner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBanner", reflect.TypeOf((*MockService)(nil).CreateBanner), ctx, banner)
}

// DeleteBanner mocks base method.
func (m *MockService) DeleteBanner(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBanner", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBanner indicates an expected call of DeleteBanner.
func (mr *MockServiceMockRecorder) DeleteBanner(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBanner", reflect.TypeOf((*MockService)(nil).DeleteBanner), ctx, id)
}

// DeleteBannersByTagOrFeature mocks base method.
func (m *MockService) DeleteBannersByTagOrFeature(ctx context.Context, options *models.BannerIdentOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBannersByTagOrFeature", ctx, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBannersByTagOrFeature indicates an expected call of DeleteBannersByTagOrFeature.
func (mr *MockServiceMockRecorder) DeleteBannersByTagOrFeature(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBannersByTagOrFeature", reflect.TypeOf((*MockService)(nil).DeleteBannersByTagOrFeature), ctx, options)
}

// ListBannerHistory mocks base method.
func (m *MockService) ListBannerHistory(ctx context.Context, id int) ([]models.HistoryBanner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBannerHistory", ctx, id)
	ret0, _ := ret[0].([]models.HistoryBanner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBannerHistory indicates an expected call of ListBannerHistory.
func (mr *MockServiceMockRecorder) ListBannerHistory(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBannerHistory", reflect.TypeOf((*MockService)(nil).ListBannerHistory), ctx, id)
}

// ListBanners mocks base method.
func (m *MockService) ListBanners(ctx context.Context, options *models.BannerListOptions) ([]models.BannerExt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBanners", ctx, options)
	ret0, _ := ret[0].([]models.BannerExt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBanners indicates an expected call of ListBanners.
func (mr *MockServiceMockRecorder) ListBanners(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBanners", reflect.TypeOf((*MockService)(nil).ListBanners), ctx, options)
}

// SelectBannerVersion mocks base method.
func (m *MockService) SelectBannerVersion(ctx context.Context, id, version int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectBannerVersion", ctx, id, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectBannerVersion indicates an expected call of SelectBannerVersion.
func (mr *MockServiceMockRecorder) SelectBannerVersion(ctx, id, version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectBannerVersion", reflect.TypeOf((*MockService)(nil).SelectBannerVersion), ctx, id, version)
}

// UpdateBanner mocks base method.
func (m *MockService) UpdateBanner(ctx context.Context, id int, banner *models.UpdateBanner) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBanner", ctx, id, banner)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBanner indicates an expected call of UpdateBanner.
func (mr *MockServiceMockRecorder) UpdateBanner(ctx, id, banner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBanner", reflect.TypeOf((*MockService)(nil).UpdateBanner), ctx, id, banner)
}

// UserGetBanners mocks base method.
func (m *MockService) UserGetBanners(ctx context.Context, options *models.BannerUserOptions) (*models.UserBanner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGetBanners", ctx, options)
	ret0, _ := ret[0].(*models.UserBanner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGetBanners indicates an expected call of UserGetBanners.
func (mr *MockServiceMockRecorder) UserGetBanners(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetBanners", reflect.TypeOf((*MockService)(nil).UserGetBanners), ctx, options)
}

// MockAuthenticator is a mock of Authenticator interface.
type MockAuthenticator struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticatorMockRecorder
}

// MockAuthenticatorMockRecorder is the mock recorder for MockAuthenticator.
type MockAuthenticatorMockRecorder struct {
	mock *MockAuthenticator
}

// NewMockAuthenticator creates a new mock instance.
func NewMockAuthenticator(ctrl *gomock.Controller) *MockAuthenticator {
	mock := &MockAuthenticator{ctrl: ctrl}
	mock.recorder = &MockAuthenticatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticator) EXPECT() *MockAuthenticatorMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockAuthenticator) Authenticate(token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockAuthenticatorMockRecorder) Authenticate(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuthenticator)(nil).Authenticate), token)
}

// MockAuthorizer is a mock of Authorizer interface.
type MockAuthorizer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizerMockRecorder
}

// MockAuthorizerMockRecorder is the mock recorder for MockAuthorizer.
type MockAuthorizerMockRecorder struct {
	mock *MockAuthorizer
}

// NewMockAuthorizer creates a new mock instance.
func NewMockAuthorizer(ctrl *gomock.Controller) *MockAuthorizer {
	mock := &MockAuthorizer{ctrl: ctrl}
	mock.recorder = &MockAuthorizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizer) EXPECT() *MockAuthorizerMockRecorder {
	return m.recorder
}

// IsAdmin mocks base method.
func (m *MockAuthorizer) IsAdmin(token string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAdmin", token)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAdmin indicates an expected call of IsAdmin.
func (mr *MockAuthorizerMockRecorder) IsAdmin(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAdmin", reflect.TypeOf((*MockAuthorizer)(nil).IsAdmin), token)
}

// MockTokenGenerator is a mock of TokenGenerator interface.
type MockTokenGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockTokenGeneratorMockRecorder
}

// MockTokenGeneratorMockRecorder is the mock recorder for MockTokenGenerator.
type MockTokenGeneratorMockRecorder struct {
	mock *MockTokenGenerator
}

// NewMockTokenGenerator creates a new mock instance.
func NewMockTokenGenerator(ctrl *gomock.Controller) *MockTokenGenerator {
	mock := &MockTokenGenerator{ctrl: ctrl}
	mock.recorder = &MockTokenGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenGenerator) EXPECT() *MockTokenGeneratorMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockTokenGenerator) GenerateToken(isAdmin bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", isAdmin)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockTokenGeneratorMockRecorder) GenerateToken(isAdmin any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockTokenGenerator)(nil).GenerateToken), isAdmin)
}
